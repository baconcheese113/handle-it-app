# Name of your workflow.
name: main

# Trigger the workflow manually or after push a commit
on: [push, workflow_dispatch]

env:
  FLUTTER_VERSION: 3.13.0
  NODE_VERSION: 18.12.1

# 2 jobs are configured.
# The first one runs tests on iOS devices.
# The second runs tests on Android devices
jobs:
  # job responsible for running Flutter tests on iOS devices
  ios:
    # Creates a build matrix for your jobs. You can define different variations of an environment to run each job
    strategy:
      matrix:
        device:
          # The available simulators are listed by the "xcrun xctrace list devices" command
          # the name of the simulator could be different depending on the macos version you are using
          - "iPhone 14 Simulator (16.2)"
      # if one of the jobs in the matrix expansion fails, the rest of the jobs will be cancelled
      fail-fast: true
    runs-on: macos-13 # or macos-latest if you prefer, but be aware that the available simulators could be different if you run a different version
    steps:
      - uses: ankane/setup-postgres@v1
        with:
          postgres-version: 15

      - name: "List all simulators"
        run: "xcrun xctrace list devices"

      - name: "Start Simulator"
        # the command "xcrun simctl boot" expects a device identifier
        # the assignment of the UDID variable consists of retrieving the ID of the simulator
        # by extracting it from the command "xcrun xctrace list devices"
        run: |
          UDID=$(xcrun xctrace list devices | grep -m 1 "^${{ matrix.device }}" | awk '{gsub(/[()]/,""); print $NF}')
          echo $UDID
          xcrun simctl boot "${UDID:?No Simulator with this name found}"

      - name: Checkout app repo
        uses: actions/checkout@v3.6.0
        with:
          path: handle-it-app

      - name: Checkout server repo
        uses: actions/checkout@v3.6.0
        with:
          repository: baconcheese113/handle-it-server
          path: handle-it-server

      - name: Setup Nodejs
        uses: actions/setup-node@v3.8.1
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./handle-it-server/package-lock.json"

      - name: Build HandleIt backend
        run: |
          echo ">>>STARTING DIRECTORY"
          ls -a
          cd handle-it-server
          touch .env
          echo "DATABASE_URL=postgresql://$USER:@localhost:5432/postgres?schema=public" >> .env
          echo "FCM_TOKEN=test_fcm_token" >> .env
          echo "JWT_SECRET=test_secret" >> .env
          echo "FIREBASE_PROJECT_ID=handleit-f352d" >> .env
          echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> .env
          echo "FIREBASE_CLIENT_EMAIL=firebase-adminsdk-icmto@handleit-f352d.iam.gserviceaccount.com" >> .env
          echo "HUB_CURRENT_FIRMWARE_VERSION=0.1.0" >> .env
          echo "SENSOR_CURRENT_FIRMWARE_VERSION=0.1.1" >> .env
          npm install
          npm run push-db:dev
          npm run build
          npm run seed

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2.10.0
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Flutter dependencies
        run: |
          cd handle-it-app
          flutter --version
          flutter pub get

      - name: Add .env and built files
        run: |
          cd handle-it-app
          touch .env
          echo API_URL=http://localhost:8080 >> .env
          echo FIRMWARE_SERVER_URL=${{ secrets.FIRMWARE_SERVER_URL }} >> .env
          echo GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} >> .env
          cat .env
          flutter pub run build_runner build

      - name: Start server
        run: |
          cd handle-it-server &&
          npm run start &
          sleep 10 &&
          curl http://localhost:8080 -I

      - name: Run integration tests
        run: |
          cd handle-it-app
          flutter test integration_test --flavor devtest --verbose --machine

  # job responsible for running Flutter tests on Android devices
  android:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # api-level: [28, 29, 30, 31, 32, 33]
        # arch: [x86_64]
        include:
          - api-level: 24
            arch: x86
            os: macos-12
          # api level 25 always times out at 12 min
          # - api-level: 26
          #   arch: x86
          # - api-level: 27
          #   arch: x86
      fail-fast: false
    steps:
      - uses: ikalnytskyi/action-setup-postgres@v4
        with:
          username: postgres
          password: postgres
          database: postgres
          port: 5432
        id: postgres

      - name: Checkout app repo
        uses: actions/checkout@v3.6.0
        with:
          path: handle-it-app

      - name: Checkout server repo
        uses: actions/checkout@v3.6.0
        with:
          repository: baconcheese113/handle-it-server
          path: handle-it-server

      - name: Setup Nodejs
        uses: actions/setup-node@v3.8.1
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./handle-it-server/package-lock.json"

      - name: Run HandleIt backend
        run: |
          echo ">>>STARTING DIRECTORY"
          ls -a
          cd handle-it-server
          touch .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres?schema=public" >> .env
          echo "FCM_TOKEN=test_fcm_token" >> .env
          echo "JWT_SECRET=test_secret" >> .env
          echo "FIREBASE_PROJECT_ID=handleit-f352d" >> .env
          echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> .env
          echo "FIREBASE_CLIENT_EMAIL=firebase-adminsdk-icmto@handleit-f352d.iam.gserviceaccount.com" >> .env
          echo "HUB_CURRENT_FIRMWARE_VERSION=0.1.0" >> .env
          echo "SENSOR_CURRENT_FIRMWARE_VERSION=0.1.1" >> .env
          npm install
          npm run push-db:dev
          npm run build
          npm run seed

      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          distribution: "zulu"
          java-version: 11

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2.10.0
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Flutter dependencies
        run: |
          cd handle-it-app
          flutter --version
          flutter pub get

      - name: Add built files
        run: |
          cd handle-it-app
          touch .env
          echo API_URL=http://10.0.2.2:8080 >> .env
          echo FIRMWARE_SERVER_URL=${{ secrets.FIRMWARE_SERVER_URL }} >> .env
          echo GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} >> .env
          cat .env
          flutter pub run build_runner build

      - name: Start server
        run: |
          cd handle-it-server &&
          npm run start &
          sleep 10 &&
          curl http://localhost:8080 -I

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2.8.0

      - name: AVD cache
        uses: actions/cache@v3.3.1
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            ~/.android/debug.keystore
          key: avd-${{ matrix.api-level }}-${{ matrix.os }}-${{ matrix.arch }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != true
        uses: reactivecircus/android-emulator-runner@v2.28.0
        with:
          api-level: ${{ matrix.api-level }}
          target: playstore
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run integration tests
        # more info on https://github.com/ReactiveCircus/android-emulator-runner
        uses: reactivecircus/android-emulator-runner@v2.28.0
        with:
          api-level: ${{ matrix.api-level }}
          target: playstore
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          pre-emulator-launch-script: |
            echo "Running pre emulator launch script. Printing the working directory now:"
            pwd
          script: cd handle-it-app && flutter test integration_test --flavor devtest --verbose
