# Name of your workflow.
name: main

# Trigger the workflow manually or after push a commit
on: [push, workflow_dispatch]

env:
  FLUTTER_VERSION: 3.3.2
  NODE_VERSION: 18.7.0

# 2 jobs are configured.
# The first one runs tests on iOS devices.
# The second runs tests on Android devices
jobs:

  # job responsible for running Flutter tests on iOS devices
  ios:
    # Creates a build matrix for your jobs. You can define different variations of an environment to run each job
    strategy:
      matrix:
        device:
          # The available simulators are listed by the "xcrun xctrace list devices" command
          - "iPhone 11 Simulator" # the name of the simulator could be different depending on the macos version you are using
      # if one of the jobs in the matrix expansion fails, the rest of the jobs will be cancelled
      fail-fast: true
    runs-on: macos-latest # or macos-latest if you prefer, but be aware that the available simulators could be different if you run a different version
    steps:
      - uses: ikalnytskyi/action-setup-postgres@v3
        with:
          username: postgres
          password: postgres
          database: postgres
          port: 5432
        id: postgres

      - name: "List all simulators"
        run: "xcrun xctrace list devices"

      - name: "Start Simulator"
        # the command "xcrun simctl boot" expects a device identifier
        # the assignment of the UDID variable consists of retrieving the ID of the simulator
        # by extracting it from the command "xcrun xctrace list devices"
        run: |
          UDID=$(xcrun xctrace list devices | grep "^${{ matrix.device }}" | awk '{gsub(/[()]/,""); print $NF}')
          echo $UDID
          xcrun simctl boot "${UDID:?No Simulator with this name found}"

      - name: Checkout app repo
        uses: actions/checkout@v3
        with:
          path: handle-it-app

      - name: Checkout server repo
        uses: actions/checkout@v3
        with:
          repository: baconcheese113/handle-it-server
          path: handle-it-server

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './handle-it-server/package-lock.json'

      - name: Run HandleIt backend
        run: |
          echo ">>>STARTING DIRECTORY"
          ls -a
          cd handle-it-server
          touch .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres?schema=public" >> .env
          echo "FCM_TOKEN=test_fcm_token" >> .env
          echo "JWT_SECRET=test_secret" >> .env
          echo "FIREBASE_PROJECT_ID=handleit-f352d" >> .env
          echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> .env
          echo "FIREBASE_CLIENT_EMAIL=firebase-adminsdk-icmto@handleit-f352d.iam.gserviceaccount.com" >> .env
          echo "HUB_CURRENT_FIRMWARE_VERSION=0.1.0" >> .env
          echo "SENSOR_CURRENT_FIRMWARE_VERSION=0.1.1" >> .env
          npm install
          npm run push-db:dev
          npm run build

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          # instead of "channel: stable", you could be more precise by specifying the exact version of Flutter you're using:
          # flutter-version: '<FLUTTER_VERSION>'

      - name: Install Flutter dependencies
        run: |
          cd handle-it-app
          flutter pub get

      - name: Add .env and built files
        run: |
          cd handle-it-app
          touch .env
          echo API_URL=${{ secrets.API_URL }} >> .env
          echo FIRMWARE_SERVER_URL=${{ secrets.FIRMWARE_SERVER_URL }} >> .env
          echo GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} >> .env
          cat .env
          flutter pub run build_runner build

      - name: Run integration tests
        run: |
          cd handle-it-server
          npm run start
          cd ../handle-it-app
          flutter test integration_test --flavor devtest --verbose

  # job responsible for running Flutter tests on Android devices
  android:
    runs-on: macos-latest
    strategy:
      matrix:
        api-level:
          - 29
          # you can add more API level if you want to run your tests on different API
      fail-fast: true
    steps:
      - uses: ikalnytskyi/action-setup-postgres@v3
        with:
          username: postgres
          password: postgres
          database: postgres
          port: 5432
        id: postgres

      - name: Checkout app repo
        uses: actions/checkout@v3
        with:
          path: handle-it-app

      - name: Checkout server repo
        uses: actions/checkout@v3
        with:
          repository: baconcheese113/handle-it-server
          path: handle-it-server

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 18.7.0
          cache: 'npm'
          cache-dependency-path: './handle-it-server/package-lock.json'

      - name: Run HandleIt backend
        run: |
          echo ">>>STARTING DIRECTORY"
          ls -a
          cd handle-it-server
          touch .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres?schema=public" >> .env
          echo "FCM_TOKEN=test_fcm_token" >> .env
          echo "JWT_SECRET=test_secret" >> .env
          echo "FIREBASE_PROJECT_ID=handleit-f352d" >> .env
          echo "FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" >> .env
          echo "FIREBASE_CLIENT_EMAIL=firebase-adminsdk-icmto@handleit-f352d.iam.gserviceaccount.com" >> .env
          echo "HUB_CURRENT_FIRMWARE_VERSION=0.1.0" >> .env
          echo "SENSOR_CURRENT_FIRMWARE_VERSION=0.1.1" >> .env
          npm install
          npm run push-db:dev
          npm run build

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          # instead of "channel: stable", you could be more precise by specifying the exact version of Flutter you're using:
          # flutter-version: '<FLUTTER_VERSION>'

      - name: Install Flutter dependencies
        run: |
          cd handle-it-app
          flutter pub get

      - name: Add built files
        run: |
          cd handle-it-app
          touch .env
          echo API_URL=${{ secrets.API_URL }} >> .env
          echo FIRMWARE_SERVER_URL=${{ secrets.FIRMWARE_SERVER_URL }} >> .env
          echo GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} >> .env
          cat .env
          flutter pub run build_runner build

      - name: Run integration tests
        # more info on https://github.com/ReactiveCircus/android-emulator-runner
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          profile: Nexus 5
          script: cd handle-it-server && npm run start && cd ../handle-it-app && flutter test integration_test --flavor devtest --verbose
