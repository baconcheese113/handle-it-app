# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Event {
    createdAt: DateTime!
    id: Int!
    propagatedAt: DateTime
    sensor: Sensor!
}

type Hub {
    "Battery level from 0 - 100"
    batteryLevel: Float
    createdAt: DateTime!
    events: [Event!]!
    id: Int!
    isArmed: Boolean!
    isCharging: Boolean
    latestVersion: String!
    locations: [Location!]!
    name: String!
    networks: [Network!]!
    notificationOverride: NotificationOverride
    owner: User!
    ownerId: Int!
    sensors: [Sensor!]!
    serial: String!
    vehicle: Vehicle
}

type Location {
    "Age of this location (in ms)"
    age: Int!
    "Ground course (in degrees)"
    course: Float!
    createdAt: DateTime!
    fixedAt: DateTime
    "Horizontal diminution of precision (in meters)"
    hdop: Float!
    hub: Hub!
    id: Int!
    "Latitude (in degrees)"
    lat: Float!
    "Longitude (in degrees)"
    lng: Float!
    "Speed in KMPH (always slight movement)"
    speed: Float!
}

type Mutation {
    acceptNetworkMembership(networkMemberId: Int!): Network!
    createEvent(serial: String!): Event!
    createHub(imei: String!, name: String!, serial: String!): Hub!
    createLocation(age: Int!, course: Float!, hdop: Float!, lat: Float!, lng: Float!, speed: Float!): Location!
    createNetwork(name: String!): Network!
    createNetworkMember(email: String!, networkId: Int!, role: RoleType!): NetworkMember!
    createSensor(batteryLevel: Int, doorColumn: Int!, doorRow: Int!, isConnected: Boolean, isOpen: Boolean, serial: ID!): Sensor!
    createVehicle(carQueryId: String!, hubId: ID!, makeId: String!, modelBody: String!, modelName: String!, modelTrim: String!, year: Int!): Vehicle!
    declineNetworkMembership(networkMemberId: Int!): Network!
    deleteHub(id: ID!): Hub!
    deleteNetwork(networkId: Int!): Network!
    deleteNetworkMember(networkMemberId: Int!): Network!
    deleteVehicle(id: ID!): Vehicle!
    loginAsHub(imei: String!, serial: String!, userId: ID!): String!
    loginWithPassword(email: String!, fcmToken: String!, password: String!): String!
    propagateEventToNetworks(eventId: Int!): Event!
    registerWithPassword(email: String!, fcmToken: String!, firstName: String, lastName: String, password: String!): String!
    requestNetworkMembership(networkName: String!): NetworkMember!
    seedUser(email: String!, firstName: String, lat: Float!, lng: Float!): User!
    updateHub(batteryLevel: Int, id: ID!, isArmed: Boolean, isCharging: Boolean, name: String): Hub!
    "Volts should be between 0 - 1023, percent between 0 - 100"
    updateHubBatteryLevel(percent: Float!, volts: Float!): Hub!
    updateNetworkMember(networkMemberId: Int!, role: RoleType): NetworkMember!
    updateNotificationOverride(hubId: Int!, shouldMute: Boolean!): NotificationOverride!
    updateSensor(id: ID!, isOpen: Boolean): Sensor!
    updateUser(defaultFullNotification: Boolean, firstName: String, lastName: String): User!
    updateVehicle(color: String, id: ID!, notes: String): Vehicle!
}

type Network {
    createdAt: DateTime!
    createdById: Int!
    hubs: [Hub!]!
    id: Int!
    members: [NetworkMember!]!
    name: String!
}

type NetworkMember {
    canDelete: Boolean!
    id: Int!
    inviteeAcceptedAt: DateTime
    inviterAcceptedAt: DateTime
    network: Network!
    networkId: Int!
    role: RoleType!
    """

    Invited: network invited them.

    Requested: they requested to join network.

    Active: accepted on both sides into network
    """
    status: NetworkMemberStatus!
    user: User!
    userId: Int!
}

type NotificationOverride {
    createdAt: DateTime!
    hub: Hub!
    hubId: Int!
    id: Int!
    isMuted: Boolean!
    user: User!
    userId: Int!
}

type Query {
    hub(id: Int!): Hub
    hubViewer: Hub!
    viewer: Viewer!
}

type Sensor {
    batteryLevel: Int
    doorColumn: Int!
    doorRow: Int!
    events: [Event!]!
    hub: Hub!
    id: Int!
    isConnected: Boolean!
    isOpen: Boolean!
    serial: String!
}

type User {
    activatedAt: DateTime
    defaultFullNotification: Boolean!
    displayName: String!
    email: String!
    firstName: String
    hubs: [Hub!]!
    id: Int!
    isMe: Boolean!
    lastName: String
    networkMemberships: [NetworkMember!]!
    notificationOverrides: [NotificationOverride!]!
}

type Vehicle {
    carQueryId: String!
    color: String
    createdAt: DateTime!
    hub: Hub!
    id: Int!
    makeId: String!
    modelBody: String!
    modelName: String!
    modelTrim: String!
    notes: String
    year: Int!
}

type Viewer {
    hubs: [Hub!]!
    latestSensorVersion: String!
    networks(status: NetworkMemberStatus): [Network!]!
    user: User!
}

enum NetworkMemberStatus {
    active
    invited
    requested
}

enum RoleType {
    member
    owner
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime
